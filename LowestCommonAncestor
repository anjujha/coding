/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool searchSubtree(TreeNode* root, TreeNode* nodeToSearch)
    {
        if (!root)
            return false;
        
        if (root == nodeToSearch)
            return true;
        else
        return (searchSubtree(root->left, nodeToSearch) || 
            searchSubtree(root->right, nodeToSearch));
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
        if (!root)
            return root;
        
        if (root == p || root == q)
            return root;
    
        bool isPinLeft = searchSubtree(root->left, p);
        bool isQinLeft = searchSubtree(root->left, q);
        
        if (isPinLeft && !isQinLeft)
            return root;
        if (isQinLeft && !isPinLeft)
            return root;
        if (isPinLeft && isQinLeft)
            return lowestCommonAncestor(root->left, p, q);
        else
            return lowestCommonAncestor(root->right, p, q);
    }
};
