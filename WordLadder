#include <iostream>
#include <string>
#include <unordered_set>
#include <queue>
using namespace std;

  int ladderLength(string beginWord, string endWord, unordered_set<string>& wordDict) {
        
        // if start and end words are same, no transition is needed
        if (beginWord == endWord)
            return 0;
            
        // if there are no words in the dict, transformation is not possible
        if (wordDict.size() == 0)
            return 0;
        
        // add the end word into the dict
        wordDict.insert(endWord);
        
        // Maintain a ladder at every step with the word that is reached in l steps
        queue< pair<string, int> > q;
        q.push( make_pair(beginWord, 1) );
        
        while(!q.empty())
        {
            pair <string, int> p  = q.front();
            
            int l = p.second;
            string s = p.first;
          
            q.pop();
            // found word!
            if (s == endWord)
                return l;
          
            for (int i = 0; i < s.length(); i++)
            {
                for (char c = 'a'; c<= 'z'; c++)
                {
                  
                 
                  if ( s[i] != c)
                  {
                    swap(s[i],c);
                    
                    if ( wordDict.find(s) != wordDict.end())
                    {
                       
                        q.push(make_pair(s, l+1));
                        wordDict.erase(s);
                    }
                  }
                   swap(c,s[i]);               
                }
            }
        }
        
      return 0;
    } 
      
int main() {
  
  //string s=" ab ch djj";
  unordered_set<string> wordDict {"hit","dot","dog", "lot", "log", "cog"};
  
  cout << "Length is "<<ladderLength("hit", "hit",wordDict);
  //cout << "Answer is ."<< s <<"."<< endl;
  return 0;
}
