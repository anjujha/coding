#include <unordered_map>
#include <algorithm>
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        
       vector< vector<int>> output;
        int size = nums.size();
        if (size < 3)
        {
            return output;
        }
        std::sort(nums.begin(), nums.end());
        for (int i = 0 ; i < size-2 ; i++)
        {
            if (i == 0 || nums.at(i-1)!=nums.at(i))
            {
                int begin = i+1;
                int end = size - 1;
                int x = -1*nums.at(i);
                while(begin < end)
                {
                    if ((nums.at(begin) + nums.at(end)) == x)
                    {
                       vector<int> tuple = {nums.at(i),nums.at(begin),nums.at(end)};
                        begin++;
                       end--;
                       output.push_back(tuple);
                        while(begin <end && nums.at(begin) == nums.at(begin-1))
                        {
                            begin++;
                        }
                        while(begin < end && nums.at(end+1) == nums.at(end))
                        {
                            end--;
                        }
                    }
                    else if ((nums.at(begin) + nums.at(end)) < x)
                    {
                     begin++;   
                    }
                    else 
                    {
                       end-- ;
                    }
                }
            }
        }
        return output;
    }
};
