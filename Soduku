#include <iostream>
#include <vector>
#include <utility>
#include <unordered_map>

using namespace std;

bool isValidSudoku(vector<vector<char>>& board) {
        unordered_multimap<int, pair<int, int> > map;
        for (int i = 0 ; i < board.size(); i++)
        {
            for (int j = 0 ; j < board[0].size(); j++)
            {
                char val = board[i][j];
                if ( val != '.')
                {
                  
                  if (map.find(val)!=map.end())
                  {
                      pair<int, int> p = map.find(val)->second;
                      
                      if (p.first == i || p.second == j || (p.first/3 == i/3 && p.second/3 == j/3))
                      return false;
                    }
                   }
                    map.emplace(val , make_pair(i,j));
                }
        }
        return true;
    }
// To execute C++, please define "int main()"

int main() {
  
  vector< vector<char> > board1 ;
  vector<char>  board;
  board.push_back('.');
  board.push_back('1');
  board.push_back('.');
  board.push_back('5');
  board.push_back('2');
  board.push_back('.');
  board.push_back('.');
  board.push_back('.');
  board.push_back('.');
  board1.push_back(board);
  board.clear();
  
  board.push_back('.');
  board.push_back('.');
  board.push_back('.');
  board.push_back('.');
  board.push_back('.');
  board.push_back('.');
  board.push_back('.');
  board.push_back('.');
  board.push_back('.');
  board1.push_back(board);

  board1.push_back(board);
 
  board1.push_back(board);
  
  board1.push_back(board);

  board1.push_back(board);

  board1.push_back(board);
  vector<char> board2 = board;
  board.clear();
  
  
  board.push_back('.');
  board.push_back('.');
  board.push_back('.');
  board.push_back('5');
  board.push_back('.');
  board.push_back('.');
  board.push_back('.');
  board.push_back('.');
  board.push_back('.');
  board1.push_back(board);
  
  board1.push_back(board2);
  
  
  cout << isValidSudoku(board1);
  

  return 0;

}
